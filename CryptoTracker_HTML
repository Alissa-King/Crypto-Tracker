<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Crypto Price Tracker</title>
  <link Â  
 href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.3/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100 py-10">
  <div class="container mx-auto px-4">
    <h1 class="text-2xl font-bold mb-4">Cryptocurrency Price Tracker</h1>
    <form id="priceForm" class="mb-4">
      <input type="text" id="cryptoSymbol" placeholder="Crypto Symbol (e.g., BTC)" class="p-2 border border-gray-300 rounded mr-2" required>
      <input type="date" id="startDate" class="p-2 border border-gray-300 rounded mr-2" required>
      <input type="date" id="endDate" class="p-2 border border-gray-300 rounded mr-2" required>
      <button type="submit" class="bg-blue-500 text-white p-2 rounded">Get Prices</button>
    </form>

    <div id="chartContainer" style="height:300px;"> 
      <canvas id="priceChart"></canvas> 
    </div>

  </div>

  <script>
    document.getElementById('priceForm').addEventListener('submit', async function (e) {
      e.preventDefault(); 

      const symbol = document.getElementById('cryptoSymbol').value.toLowerCase();
      const start = document.getElementById('startDate').value;
      const end = document.getElementById('endDate').value;
    

      try {
        const response = await fetch(`https://api.coingecko.com/api/v3/coins/${symbol}/market_chart/range?vs_currency=usd&from=${new Date(start).getTime() / 1000}&to=${new Date(end).getTime() / 1000}`);
        
        if (!response.ok) {
          throw new Error('API request failed.');
        }

        const data = await response.json();
        const prices = data.prices;

        const chartLabels = prices.map(price => new Date(price[0]).toLocaleDateString());
        const chartData = prices.map(price => price[1]);
        
        // Destroy existing chart if present
        let existingChart = Chart.getChart('priceChart');
        if (existingChart) {
          existingChart.destroy();
        }

        const ctx = document.getElementById('priceChart').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: chartLabels,
            datasets: [{
              label: `${symbol.toUpperCase()} Price`,
              data: chartData,
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 2,
              fill: false
            }]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: false
              }
            }
          }
        });
      } catch (error) {
        console.error('Error fetching or processing data:', error);
        // You can add a user-friendly error message here
      }
    });
  </script>
</body>
</html>
